
import org.apache.spark.SparkContext;

import org.apache.spark.SparkConf;



object Main {

  def main(args:Array[String]) {

    val sparkConf = new SparkConf().setAppName("Inpatient_Analysis").setMaster("local")

    val sc = new SparkContext(sparkConf)

    

    /*    

        1. Find out the city and the state name which has the

        highest and lowest number of discharge cases.

        

        2. What are all the different referral regions under

        every state with a code AL and CA which has a discharge rate of 

        more than 20.

    */

    

    /*

      Some of the data under "HospitalReferralRegion" contain the zipcode and 

      		solution: Filter out columns that do not contain states (String length != 2)

      Some of the data under "TotalDischarges" contain the "HospitalReferralRegion" which

      causes an exception to be thrown when trying to reduceByKey.

      		solution: Filter out rows that contain a "-".

    */

    

    val inpatientRDD = sc.textFile("inpatient_samp.csv")

    val headers = inpatientRDD.first();

    val inpatient = inpatientRDD.filter(x=>x!=headers).map(x=>(x.split(",")))

   

    //Find out the city and the state name which has the highest and lowest number of discharge cases.

    val inpatientPair = inpatient.filter(x=> x(7).split("-").length == 2).map(x=>((x(7).split("-")(0).trim(),x(7).split("-")(1).trim()), x(8)))

    .filter(x=>x._1._1.length()==2 && !x._1._2.contains("-")).

    map(x=>( (x._1._1,x._1._2), x._2.toInt)).

    reduceByKey((x,y)=>x+y).sortBy(x=>x._2,false)

    inpatientPair.saveAsTextFile("HighLowDischarges");

    

 	  //What are all the different referral regions under every state with a code AL and CA which has a discharge rate of  more than 20.

    val dischargeRate = inpatient.filter(x=> x(7).split("-").length == 2).map(x=>((x(7).split("-")(0).trim(),x(7).split("-")(1).trim()), x(8).toInt)).

    reduceByKey((x,y)=>x+y).distinct().filter( x=> (x._1._1.equals("AL") || x._1._1.equals("CA")) && x._2 > 20)

    dischargeRate.saveAsTextFile("DischargeRateMorethan20")

  }

}